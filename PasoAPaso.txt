/*Configuración*/

1. Generar el package-json: npm init -y

2. Agregar los scripts de ejecución en el package.json

3. Crear el archivo: .eslintrc.json

4. Crear el archivo para definir algunas reglas de formato de código: .prettierrc.json

5. Instalar express para crear nuestro app web: npm i express

6. Instalar dotenv para cargar variables de entorno del archivo .env: npm i dotenv

7. Instalar nodemon para que se ejecute el código cada que haya un cambio: npm i nodemon -D

8. Instalar las dependencias necesarias para aplicar la configuracion de eslint y prettier:
   npm i eslint eslint-config-prettier eslint-plugin-prettier prettier -D

9. Instalar husky hooks para que nuestro código haga el formateo automático cada que se
   haga commit y se suba al repositorio: npx mrm@2 lint-staged y modificar el package.json

/*Express y Router*/

10. Crear la carpeta: config

11. Crear el archivo: config/index.js

12. Crear el archivo: index.js

13. Crear la carpeta: utils

14. Crear la carpeta: utils/mocks

15. Crear el archivo: utils/mocks/movies.js

13. Crear la carpeta: routes

14. Crear el archivo: movies.js

15. Crear el archivo: .gitignore, agregar la info desde la página gitignore.io

16. Subimos nuestro avance del proyecto a un repositorio:
    git inti
    git remote add origin https://github.com/Manuelowsky/MoviesAPI
    git status 
    git add .
    git commit -m "Se agregaron las rutas y archivos de configuracion"
    git push origin master

/*Implementando Clean Architecture*/

17. Crear la carpeta: services

18. Crear el archivo que contiene la lógica del programa: services/movies.js

/*Conección a servicios y librerias externas (Para este caso MongoDB)*/

19. Ingresar a MongoDB logearnos y crear un nuevo Cluster

20. Restringir las conexiones de IP: Network Access/Add IP/Allow Access Anyware

21. Crear un usuario: Database Access/New User

22. Crear la BD: Cluster/Collections/DB Name: dbmoviesAPI, Collection Name: movies

23. Instalar el paquete: npm i mongodb

24. Crear los archivos: .env (Tiene las variables de entorno y van a ser alimentadas por el archivo de configuración)

25. Crear los archivos: .env.example (Para que cualquier otro desarrollador sepa que variables de entorno debe alimentar localmente)

26. Crear la carpeta: lib

27. Crear el archivo: mongo.js

28. Crear la carpeta: utils/middleware

29. Crear el archivo: utils/middleware/errorHandlers.js

30. Crear el archivo: utils/middleware/validationHandler.js

/*Validaciones*/

31. Instalar la dependencia boom que nos ayuda a imprimir errores comunes en peticiones HTTP de forma sencilla: npm i @hapi/boom

32. Crear el archivo: utils/middleware/notFoundHandler.js

32. Instalar la dependencia joi que sirve para validar que los datos que recibimos vengan en el formato adecuado (schema): npm i @hapi/joi

32. Crear la carpeta: utils/schemas

33. Crear el archivo: utils/schemas/movies.js

/*Test*/

34. Instalar la dependencia: npm i -D mocha supertest sinon proxyquire

35. Crear el archivo: utils/testServer.js

36. Crear la carpeta: test

37. Crear el archivo: test/routes.movies.test.js

38. Agregar el script para test en package.json

39. Crear el archivo: utils/mocks/mongoLib.js

40. Crear el archivo: test/services.movies.test.js

41. Crear el archivo: utils/buildMessage.js

42. Crear el archivo: test/utils.buildMessage.test.js

/*Coverage: Permite identificar donde estamos fallando y como corregir nuestros tests*/

43. Instalar la dependencia: npm i -D nyc

44. Agregar el script cover y report en el package.json

45. Configurar el coverage en el package.json

46. Con el comando npm run cover y npm run report, podemos ver el reporte de como estan nuestros tests

/*Capa Manejo de Cache*/

47. Crear el archivo: utils/time.js

48. Crear el archivo: utils/cacheResponse.js

/*Contener aplicación en Docker*/

49. Instalar Docker

50. Crear el archivo: Dockerfile 

51. Con el siguiente script creamos una imagen con nuestro de nuestro aplicativo: docker build -t project-movies-api .

52. Con el siguiente script podemos ejecutar nuestra imagen en modo detach: docker run -d project-movies-api

53. Si nos dirigimos a http://localhost:3000 deberíamos ver nuestra API funcionando.

/*Despliegue en Vercel*/

54. Instalar la dependencia vercel: npm i -g vercel

55. Crear el archivo: vercel.json

56. Subir los cambios al repo de github

57. Entrar a vercel y crear una nueva app, colocamos el link de nuestro repo de github

58. Antes de darle deploy AGREGAR VARIABLES DE ENTORNO (Las mismas que tenemos en env):
    DB_NAME Encrypted
    DB_HOST Encrypted
    DB_PASSWORD Encrypted
    DB_USER Encrypted
